# -*- coding: utf-8 -*-
"""River Boat Hire Management System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QQGSEBNDoS0URp81Ay4nCzIohKz7F20y
"""

# Constants
BOAT_COUNT = 5
BOAT_HOUR_RATE = 20
BOAT_HALF_HOUR_RATE = 12
OPENING_TIME = 10
CLOSING_TIME = 17

# Class definition for Boat
class Boat:
    def __init__(self, boat_number):
        self.boat_number = boat_number
        self.money_taken = 0
        self.total_hours_hired = 0
        self.return_time = OPENING_TIME

    def hire_boat(self, hours):
        if self.return_time < CLOSING_TIME:
            current_time = max(self.return_time, OPENING_TIME)
            self.return_time = min(current_time + hours, CLOSING_TIME)
            self.total_hours_hired += hours
            self.money_taken += self.calculate_cost(hours)
            return True
        else:
            return False

    def calculate_cost(self, hours):
        return hours * BOAT_HOUR_RATE if hours >= 1 else hours * BOAT_HALF_HOUR_RATE

# Function to calculate the money taken in a day for one boat
def calculate_money_for_one_boat(boat):
    print(f"\nBoat {boat.boat_number}:")
    while True:
        try:
            hire_hours = float(input("Enter the number of hours to hire (0 to finish): "))
        except ValueError:
            print("Invalid input. Please enter a valid number.")
            continue

        if hire_hours == 0:
            break

        if not boat.hire_boat(hire_hours):
            print("Boat cannot be hired beyond closing time.")
            break

    print(f"Money taken for Boat {boat.boat_number} today: ${boat.money_taken:.2f}")
    print(f"Total hours hired for Boat {boat.boat_number} today: {boat.total_hours_hired} hours")

# Function to find the next available boat
def find_next_available_boat(boats):
    current_time = max(OPENING_TIME, min([boat.return_time for boat in boats]))
    next_available_boats = [boat for boat in boats if boat.return_time == current_time]

    if next_available_boats:
        print("\nNext available boats:")
        for boat in next_available_boats:
            print(f"Boat {boat.boat_number}")
    else:
        print(f"\nNo boats currently available. Next available time: {current_time}:00")

# Function to calculate the money taken for all the boats at the end of the day
def calculate_money_for_all_boats(boats):
    total_money_taken = sum(boat.money_taken for boat in boats)
    total_hours_hired = sum(boat.total_hours_hired for boat in boats)
    unused_boats = [boat for boat in boats if boat.total_hours_hired == 0]
    most_used_boat = max(boats, key=lambda x: x.total_hours_hired)

    print("\nEnd of Day Report:")
    print(f"Total money taken for all boats: ${total_money_taken:.2f}")
    print(f"Total number of hours boats were hired today: {total_hours_hired} hours")
    print(f"Number of boats not used today: {len(unused_boats)}")
    print(f"Boat {most_used_boat.boat_number} was used the most today with {most_used_boat.total_hours_hired} hours.")

# Main program
def main():
    boats = [Boat(boat_number) for boat_number in range(1, BOAT_COUNT + 1)]

    print("TASK 1 – Calculate the money taken in a day for one boat")
    for boat in boats:
        calculate_money_for_one_boat(boat)

    print("\nTASK 2 – Find the next boat available")
    find_next_available_boat(boats)

    print("\nTASK 3 – Calculate the money taken for all the boats at the end of the day")
    calculate_money_for_all_boats(boats)

if __name__ == "__main__":
    main()

29
01